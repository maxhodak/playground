/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef MatrixMath_H
#define MatrixMath_H

#include <TProcessor.h>
#include "example_types.h"

namespace Example {

class MatrixMathIf {
 public:
  virtual ~MatrixMathIf() {}
  virtual void add(std::vector<double> & _return, const std::vector<double> & a, const std::vector<double> & b) = 0;
};

class MatrixMathNull : virtual public MatrixMathIf {
 public:
  virtual ~MatrixMathNull() {}
  void add(std::vector<double> & /* _return */, const std::vector<double> & /* a */, const std::vector<double> & /* b */) {
    return;
  }
};

typedef struct _MatrixMath_add_args__isset {
  _MatrixMath_add_args__isset() : a(false), b(false) {}
  bool a;
  bool b;
} _MatrixMath_add_args__isset;

class MatrixMath_add_args {
 public:

  MatrixMath_add_args() {
  }

  virtual ~MatrixMath_add_args() throw() {}

  std::vector<double>  a;
  std::vector<double>  b;

  _MatrixMath_add_args__isset __isset;

  bool operator == (const MatrixMath_add_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const MatrixMath_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MatrixMath_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MatrixMath_add_pargs {
 public:


  virtual ~MatrixMath_add_pargs() throw() {}

  const std::vector<double> * a;
  const std::vector<double> * b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MatrixMath_add_result__isset {
  _MatrixMath_add_result__isset() : success(false) {}
  bool success;
} _MatrixMath_add_result__isset;

class MatrixMath_add_result {
 public:

  MatrixMath_add_result() {
  }

  virtual ~MatrixMath_add_result() throw() {}

  std::vector<double>  success;

  _MatrixMath_add_result__isset __isset;

  bool operator == (const MatrixMath_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MatrixMath_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MatrixMath_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MatrixMath_add_presult__isset {
  _MatrixMath_add_presult__isset() : success(false) {}
  bool success;
} _MatrixMath_add_presult__isset;

class MatrixMath_add_presult {
 public:


  virtual ~MatrixMath_add_presult() throw() {}

  std::vector<double> * success;

  _MatrixMath_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MatrixMathClient : virtual public MatrixMathIf {
 public:
  MatrixMathClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  MatrixMathClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(std::vector<double> & _return, const std::vector<double> & a, const std::vector<double> & b);
  void send_add(const std::vector<double> & a, const std::vector<double> & b);
  void recv_add(std::vector<double> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MatrixMathProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<MatrixMathIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (MatrixMathProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MatrixMathProcessor(boost::shared_ptr<MatrixMathIf> iface) :
    iface_(iface) {
    processMap_["add"] = &MatrixMathProcessor::process_add;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~MatrixMathProcessor() {}
};

class MatrixMathMultiface : virtual public MatrixMathIf {
 public:
  MatrixMathMultiface(std::vector<boost::shared_ptr<MatrixMathIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MatrixMathMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MatrixMathIf> > ifaces_;
  MatrixMathMultiface() {}
  void add(boost::shared_ptr<MatrixMathIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(std::vector<double> & _return, const std::vector<double> & a, const std::vector<double> & b) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->add(_return, a, b);
        return;
      } else {
        ifaces_[i]->add(_return, a, b);
      }
    }
  }

};

} // namespace

#endif
